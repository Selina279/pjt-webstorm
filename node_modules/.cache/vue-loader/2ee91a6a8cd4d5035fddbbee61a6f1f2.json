{"remainingRequest":"/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/src/views/user/UserJob.vue?vue&type=template&id=297a9ba8&","dependencies":[{"path":"/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/src/views/user/UserJob.vue","mtime":1590190596132},{"path":"/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/selina/Documents/Vueworkspace/vuewebstrom/yourparttime/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}